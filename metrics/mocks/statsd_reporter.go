// Code generated by MockGen. DO NOT EDIT.
// Source: ./statsd_reporter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Gauge mocks base method
func (m *MockClient) Gauge(name string, value float64, tags []string, rate float64) error {
	ret := m.ctrl.Call(m, "Gauge", name, value, tags, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge
func (mr *MockClientMockRecorder) Gauge(name, value, tags, rate interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockClient)(nil).Gauge), name, value, tags, rate)
}

// Timing mocks base method
func (m *MockClient) Timing(name string, value time.Duration, tags []string, rate float64) error {
	ret := m.ctrl.Call(m, "Timing", name, value, tags, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Timing indicates an expected call of Timing
func (mr *MockClientMockRecorder) Timing(name, value, tags, rate interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockClient)(nil).Timing), name, value, tags, rate)
}
