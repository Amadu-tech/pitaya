// Code generated by MockGen. DO NOT EDIT.
// Source: ./reporter_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// ReportCount mocks base method
func (m *MockReporter) ReportCount(value int, metric string, tags ...string) error {
	varargs := []interface{}{value, metric}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportCount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportCount indicates an expected call of ReportCount
func (mr *MockReporterMockRecorder) ReportCount(value, metric interface{}, tags ...interface{}) *gomock.Call {
	varargs := append([]interface{}{value, metric}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCount", reflect.TypeOf((*MockReporter)(nil).ReportCount), varargs...)
}

// ReportLatency mocks base method
func (m *MockReporter) ReportLatency(value time.Duration, route, typ string, errored bool) error {
	ret := m.ctrl.Call(m, "ReportLatency", value, route, typ, errored)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportLatency indicates an expected call of ReportLatency
func (mr *MockReporterMockRecorder) ReportLatency(value, route, typ, errored interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportLatency", reflect.TypeOf((*MockReporter)(nil).ReportLatency), value, route, typ, errored)
}
