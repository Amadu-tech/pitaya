// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./serialize/serializer.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Marshaler interface
type MockMarshaler struct {
	ctrl     *gomock.Controller
	recorder *_MockMarshalerRecorder
}

// Recorder for MockMarshaler (not exported)
type _MockMarshalerRecorder struct {
	mock *MockMarshaler
}

func NewMockMarshaler(ctrl *gomock.Controller) *MockMarshaler {
	mock := &MockMarshaler{ctrl: ctrl}
	mock.recorder = &_MockMarshalerRecorder{mock}
	return mock
}

func (_m *MockMarshaler) EXPECT() *_MockMarshalerRecorder {
	return _m.recorder
}

func (_m *MockMarshaler) Marshal(_param0 interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Marshal", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMarshalerRecorder) Marshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Marshal", arg0)
}

// Mock of Unmarshaler interface
type MockUnmarshaler struct {
	ctrl     *gomock.Controller
	recorder *_MockUnmarshalerRecorder
}

// Recorder for MockUnmarshaler (not exported)
type _MockUnmarshalerRecorder struct {
	mock *MockUnmarshaler
}

func NewMockUnmarshaler(ctrl *gomock.Controller) *MockUnmarshaler {
	mock := &MockUnmarshaler{ctrl: ctrl}
	mock.recorder = &_MockUnmarshalerRecorder{mock}
	return mock
}

func (_m *MockUnmarshaler) EXPECT() *_MockUnmarshalerRecorder {
	return _m.recorder
}

func (_m *MockUnmarshaler) Unmarshal(_param0 []byte, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUnmarshalerRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmarshal", arg0, arg1)
}

// Mock of Serializer interface
type MockSerializer struct {
	ctrl     *gomock.Controller
	recorder *_MockSerializerRecorder
}

// Recorder for MockSerializer (not exported)
type _MockSerializerRecorder struct {
	mock *MockSerializer
}

func NewMockSerializer(ctrl *gomock.Controller) *MockSerializer {
	mock := &MockSerializer{ctrl: ctrl}
	mock.recorder = &_MockSerializerRecorder{mock}
	return mock
}

func (_m *MockSerializer) EXPECT() *_MockSerializerRecorder {
	return _m.recorder
}

func (_m *MockSerializer) Marshal(_param0 interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Marshal", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSerializerRecorder) Marshal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Marshal", arg0)
}

func (_m *MockSerializer) Unmarshal(_param0 []byte, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Unmarshal", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSerializerRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmarshal", arg0, arg1)
}
